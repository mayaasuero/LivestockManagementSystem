/**
 * View details of the database
 */

/**
 * @author Raphael Trocino
 * @author Maya 
 * Date: Oct 6 2019
 * Final Project
 */
import java.sql.ResultSet;
import java.sql.Connection;
public class View extends javax.swing.JFrame {
    private DriverConnector conn;
    /**
     * Constructor
     */
    public View(){
        initComponents();
        setConnection();
    }
    
    /**
     * sets connection
     */
    private void setConnection(){
        this.conn = new DriverConnector();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        exit = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("View Information Summary");

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        textArea.setRows(5);
        jScrollPane1.setViewportView(textArea);

        exit.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addGap(25, 131, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(exit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exits UI
     * @param evt event
     */
    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        this.dispose();
    }//GEN-LAST:event_exitActionPerformed

    /**
     * main method
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new View().setVisible(true);
            }
        });
    }
    
    /**
     * Appends owner table
     * @param owners owner
     */
    public void append(Owner owners){
        ResultSet rs = owners.getTableInfo(this.conn.connect());
        
        try{
            while(rs.next()){
                String id = "Owner ID: " + String.valueOf(rs.getObject("OwnerID")+"\n");
                System.out.print(id);
                textArea.append(id);
                String fName = "First name: " + String.valueOf(rs.getObject("firstName")+"\n");
                textArea.append(fName);
                String lName = "Last name: " + String.valueOf(rs.getObject("lastName")+"\n");
                textArea.append(lName);
                String cName = "Company Name: " + String.valueOf(rs.getObject("companyName")+"\n");
                textArea.append(cName);
                String cAddress = "Company Address: " + String.valueOf(rs.getObject("companyAddress")+"\n");
                textArea.append(cAddress);
                textArea.append("\n");
            }
        }
        catch(Exception e){
            textArea.append("No entries.");
        }
        this.setVisible(true);
    }
    
    /**
     * Appends customer table
     * @param customers customers
     */
    public void append(Customer customers){
        ResultSet rs = customers.getTableInfo(this.conn.connect());
        System.out.print(conn);
        
        try{
            while(rs.next()){
                String id = "Customer ID: " + String.valueOf(rs.getObject("CustomerID")+"\n");
                textArea.append(id);
                String cName = "Corporate name: " + String.valueOf(rs.getObject("CorporateName")+"\n");
                textArea.append(cName);
                String cAdd = "Corporate address: " + String.valueOf(rs.getObject("CorporateAddress")+"\n");
                textArea.append(cAdd);
                String cNum = "Contact number: " + String.valueOf(rs.getObject("ContactNumber")+"\n");
                textArea.append(cNum);
                textArea.append("\n");
            }
        }
        catch(Exception e){
            textArea.append("No entries.");
        }
        this.setVisible(true);
    }

    /**
     * Appends orders table
     * @param orders orders
     */
    public void append(Order orders){
        ResultSet rs = orders.getTableInfo(this.conn.connect());
        try{
            while(rs.next()){
                String orderNo = "Order number: " + String.valueOf(rs.getObject("orderNo")+"\n");
                System.out.print(orderNo);
                textArea.append(orderNo);
                String custID = "Customer ID: " + String.valueOf(rs.getObject("CustomerID")+"\n");
                textArea.append(custID);
                String cName = "Corporate name: " + String.valueOf(rs.getObject("customer.CorporateName")+"\n");
                textArea.append(cName);
                String dateOrdered = "Date Ordered: " + String.valueOf(rs.getObject("DateOrdered")+"\n");
                textArea.append(dateOrdered);
                textArea.append("\n");
            }
        }
        catch(Exception e){
            textArea.append("No entries.");
        }
        this.setVisible(true);
    }
    
    /**
     * Appends livestock
     * @param lv livestock
     */
    public void append(Livestock lv){
        ResultSet rs = lv.getTableInfo(this.conn.connect());
        try{
            System.out.println(rs);
            while(rs.next()){
                String lvID = "Livestock ID: " + String.valueOf(rs.getObject("livestockID")+"\n");
                textArea.append(lvID);
                String batchNo = "Batch number: " + String.valueOf(rs.getObject("batchNo")+"\n");
                textArea.append(batchNo);
                String lvName = "Livestock Name: " + String.valueOf(rs.getObject("livestockName")+"\n");
                textArea.append(lvName);
                String startDate = "Start Date: " + String.valueOf(rs.getObject("schedule.Start_Date")+"\n");
                textArea.append(startDate);
                String period = "Period: " + String.valueOf(rs.getObject("schedule.Period")+"\n");
                textArea.append(period);
                String matDate = "Maturity Date: " + String.valueOf(rs.getObject("maturityDate")+"\n");
                textArea.append(matDate);
                String schedHarv = "Schedule Harvest Date: " + String.valueOf(rs.getObject("scheduledHarvestDate")+"\n");
                textArea.append(schedHarv);
                String feeds = "Feeds: " + String.valueOf(rs.getObject("feeds")+"\n");
                textArea.append(feeds);
                String unitPrice = "Unit Price: " + String.valueOf(rs.getObject("UnitPrice")+"\n");
                textArea.append(unitPrice);
            }
        }
        catch(Exception e){
            e.printStackTrace();
            textArea.append("No entries");
        }
        this.setVisible(true);
    }
    
    /**
     * Append view payment
     * @param pymnt payment
     */
    public void append(Payment pymnt){
        ResultSet rs = pymnt.getTableInfo(this.conn.connect());        
        try{
            while(rs.next()){
                String billNo = "Bill number: " + String.valueOf(rs.getObject("BillNo")+"\n");
                textArea.append(billNo);
                String cID = "Customer ID: " + String.valueOf(rs.getObject("CustomerID")+"\n");
                textArea.append(cID);
                String cName = "Customer Name: " + String.valueOf(rs.getObject("customer.CorporateName")+"\n");
                textArea.append(cName);
                String finalC = "Final Charge: " + String.valueOf(rs.getObject("FinalCharge")+"\n");
                textArea.append(finalC);
                String tax = "Tax: " + String.valueOf(rs.getObject("Tax")+"\n");
                textArea.append(tax);
                String payDate = "Payment Date: " + String.valueOf(rs.getObject("PaymentDate")+"\n");
                textArea.append(payDate);
                textArea.append("\n");
            }
        }
        catch(Exception e){
            textArea.append("No entries.");
        }
        this.setVisible(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
